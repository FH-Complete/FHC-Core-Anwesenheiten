<?php

if (!defined('BASEPATH')) exit('No direct script access allowed');

class InfoApi extends FHCAPI_Controller
{

	private $_ci;
	private $_uid;

	public function __construct()
	{
		parent::__construct(array(
				'getStudiensemester' => array('extension/anwesenheit_admin:rw', 'extension/anw_ent_admin:rw', 'extension/anwesenheit_lektor:rw', 'extension/anwesenheit_student:rw'),
				'getAktStudiensemester' => array('extension/anwesenheit_admin:rw', 'extension/anw_ent_admin:rw', 'extension/anwesenheit_lektor:rw', 'extension/anwesenheit_student:rw'),
				'getLehreinheitAndLektorInfo' => array('extension/anwesenheit_admin:rw', 'extension/anw_ent_admin:rw', 'extension/anwesenheit_lektor:rw', 'extension/anwesenheit_student:rw'),
				'getStudentInfo' => array('extension/anwesenheit_admin:rw', 'extension/anw_ent_admin:rw', 'extension/anwesenheit_lektor:rw', 'extension/anwesenheit_student:rw'),
				'getLehreinheitenForLehrveranstaltungAndMaUid' => array('extension/anwesenheit_admin:rw', 'extension/anw_ent_admin:rw', 'extension/anwesenheit_lektor:rw', 'extension/anwesenheit_student:rw'),
				'getLehreinheitenForLehrveranstaltung' => array('extension/anwesenheit_admin:rw', 'extension/anw_ent_admin:rw', 'extension/anwesenheit_lektor:rw', 'extension/anwesenheit_student:rw'),
				'getStudiengaenge' => array('extension/anwesenheit_admin:rw', 'extension/anw_ent_admin:rw', 'extension/anwesenheit_lektor:rw', 'extension/anwesenheit_student:rw'),
				'getLektorsForLvaInSemester' => array('extension/anwesenheit_admin:rw', 'extension/anw_ent_admin:rw'),
				'getStudentsForLvaInSemester' => array('extension/anwesenheit_admin:rw', 'extension/anw_ent_admin:rw'),
				'getStundenPlanEntriesForLEandLektorOnDate' => array('extension/anwesenheit_admin:rw', 'extension/anw_ent_admin:rw', 'extension/anwesenheit_lektor:rw'),
				'getLvViewDataInfo' => array('extension/anwesenheit_admin:rw', 'extension/anw_ent_admin:rw', 'extension/anwesenheit_lektor:rw', 'extension/anwesenheit_student:rw'),
				'getLETermine' => array('extension/anwesenheit_admin:rw', 'extension/anw_ent_admin:rw', 'extension/anwesenheit_lektor:rw', 'extension/anwesenheit_student:rw'),
				'populateDBWithAnwEntries' => array('extension/anwesenheit_admin:rw'),
				'populateDBWithAnwEntriesFromExistingKontrollen' => array('extension/anwesenheit_admin:rw')
			)
		);

		$this->_ci =& get_instance();
		$this->_ci->load->model('extensions/FHC-Core-Anwesenheiten/Anwesenheit_model', 'AnwesenheitModel');
		$this->_ci->load->model('extensions/FHC-Core-Anwesenheiten/Anwesenheit_User_model', 'AnwesenheitUserModel');
		$this->_ci->load->model('extensions/FHC-Core-Anwesenheiten/Entschuldigung_model', 'EntschuldigungModel');
		$this->_ci->load->model('extensions/FHC-Core-Anwesenheiten/QR_model', 'QRModel');
		$this->_ci->load->model('organisation/Studiensemester_model', 'StudiensemesterModel');
		$this->_ci->load->model('education/Lehreinheit_model', 'LehreinheitModel');
		$this->_ci->load->model('ressource/mitarbeiter_model', 'MitarbeiterModel');
		$this->_ci->load->model('education/Lehrveranstaltung_model', 'LehrveranstaltungModel');

		$this->_ci->load->library('PermissionLib');
		$this->_ci->load->library('PhrasesLib');
		$this->_ci->load->library('DmsLib');

		$this->loadPhrases(
			array(
				'global',
				'ui'
			)
		);

		$this->_setAuthUID(); // sets property uid
	}

	// INFO API

	/**
	 * @return void
	 * getStudiensemester
	 */
	public function getStudiensemester()
	{
		$this->_ci->StudiensemesterModel->addOrder("start", "DESC");
		$result = $this->_ci->StudiensemesterModel->load();

		$studiensemester = getData($result);
		$result = $this->_ci->StudiensemesterModel->getAkt();
		$aktuell = getData($result);

		$this->terminateWithSuccess(array($studiensemester, $aktuell));
	}

	public function getAktStudiensemester()
	{
		$this->terminateWithSuccess(getData($this->_ci->StudiensemesterModel->getAkt()));
	}

	public function getLehreinheitAndLektorInfo()
	{
		$result = $this->getPostJSON();
		$le_id = $result->le_id;
		$ma_uid = $result->ma_uid;
		$currentDate = $result->date;

		$lektorLehreinheitData = $this->_ci->AnwesenheitModel->getLehreinheitAndLektorInfo($le_id, $ma_uid, $currentDate);
		$leTermine = $this->_ci->AnwesenheitModel->getLETermine($le_id);

		$this->terminateWithSuccess(array(getData($lektorLehreinheitData), getData($leTermine)));
	}

	public function getStudentInfo()
	{
		$prestudent_id = $this->input->get('prestudent_id');
		$lva_id = $this->input->get('lva_id');
		$sem_kurzbz = $this->input->get('sem_kurzbz');

		$studentLvaData = $this->_ci->AnwesenheitModel->getStudentInfo($prestudent_id, $lva_id, $sem_kurzbz, APP_ROOT);

		$this->terminateWithSuccess(getData($studentLvaData));
	}

	public function getLehreinheitenForLehrveranstaltungAndMaUid()
	{
		$lva_id = $this->input->get('lva_id');
		$ma_uid = $this->input->get('ma_uid');
		$sem_kurzbz = $this->input->get('sem_kurzbz');

		if($lva_id === 'null' || $ma_uid === 'null' || $sem_kurzbz === 'null') {
			$this->terminateWithError($this->p->t('global', 'missingParameters'), 'general');
		}

		if(isEmptyString($lva_id) ||
			isEmptyString($ma_uid)  ||
			isEmptyString($sem_kurzbz) ) {
			$this->terminateWithError($this->p->t('global', 'wrongParameters'), 'general');
		}

		$result = $this->_ci->AnwesenheitModel->getAllLehreinheitenForLvaAndMaUid($lva_id, $ma_uid, $sem_kurzbz);

		if(!isSuccess($result)) $this->terminateWithError(getError($result));
		else $this->terminateWithSuccess(getData($result));

	}

	public function getLehreinheitenForLehrveranstaltung()
	{
		$lva_id = $this->input->get('lva_id');
		$sem_kurzbz = $this->input->get('sem_kurzbz');

		if(isEmptyString($lva_id) || $lva_id === 'null' ||
			isEmptyString($sem_kurzbz) || $sem_kurzbz === 'null') {
			$this->terminateWithError($this->p->t('global', 'wrongParameters'), 'general');
		}

		$result = $this->_ci->AnwesenheitModel->getAllLehreinheitenForLva($lva_id, $sem_kurzbz);
		if(!isSuccess($result)) $this->terminateWithError(getError($result));
		$this->terminateWithSuccess(getData($result));

	}

	public function getStudiengaenge()
	{
		$result = $this->getPostJSON();
		$allowed_stg = $result->allowed_stg;

		$admin = $this->permissionlib->isBerechtigt('extension/anwesenheit_admin');

		if($admin) {
			$result = $this->_ci->AnwesenheitModel->getStudiengaenge();

			if(!isSuccess($result)) $this->terminateWithError($result);
			$this->terminateWithSuccess($result);
		} else {
			$result = $this->_ci->AnwesenheitModel->getStudiengaengeFiltered($allowed_stg);

			if(!isSuccess($result)) $this->terminateWithError($result);
			$this->terminateWithSuccess($result);
		}

	}

	public function getLektorsForLvaInSemester() {
		$lva_id = $this->input->get('lva_id');
		$sem = $this->input->get('sem');

		if($lva_id === 'null'  || $sem === 'null') {
			$this->terminateWithError($this->p->t('global', 'missingParameters'), 'general');
		}

		if(isEmptyString($lva_id) || isEmptyString($sem)) {
			$this->terminateWithError($this->p->t('global', 'wrongParameters'), 'general');
		}

		$result = $this->_ci->AnwesenheitModel->getLektorenForLvaInSemester($lva_id, $sem);

		if(!isSuccess($result)) $this->terminateWithError($result);
		$this->terminateWithSuccess($result);
	}

	public function getStudentsForLvaInSemester() {
		$lv_id = $this->input->get('lva_id');
		$sem_kurzbz = $this->input->get('sem');

		if($lv_id === 'null'  || $sem_kurzbz === 'null') {
			$this->terminateWithError($this->p->t('global', 'missingParameters'), 'general');
		}

		if(isEmptyString($lv_id) || isEmptyString($sem_kurzbz)) {
			$this->terminateWithError($this->p->t('global', 'wrongParameters'), 'general');
		}

		$result = $this->_ci->AnwesenheitModel->getStudentsForLvaInSemester($lv_id, $sem_kurzbz);
		if(!isSuccess($result)) $this->terminateWithError($result);
		$this->terminateWithSuccess($result);
	}

	public function getStundenPlanEntriesForLEandLektorOnDate() {
		$result = $this->getPostJSON();
		$le_id = $result->le_id;
		$ma_uid = $result->ma_uid;
		$date = $result->date;

		if(isEmptyString($le_id) || $le_id === 'null' || isEmptyString($ma_uid) || $ma_uid === 'null'
			|| isEmptyString($date) || $date === 'null' ) {
			$this->terminateWithError($this->p->t('global', 'wrongParameters'), 'general');
		}

		$result = $this->_ci->AnwesenheitModel->getStundenPlanEntriesForLEandLektorOnDate($le_id, $ma_uid, $date);
		if(!isSuccess($result)) $this->terminateWithError($result);
		$this->terminateWithSuccess($result);
	}

	public function getLvViewDataInfo() {
		$result = $this->getPostJSON();
		$lv_id = $result->lv_id;

		$result = $this->_ci->AnwesenheitModel->getLvViewDataInfo($lv_id);
		if(!isSuccess($result)) $this->terminateWithError($result);
		$this->terminateWithSuccess($result);
	}

	public function getLETermine() {
		$result = $this->getPostJSON();
		$le_id = $result->le_id;

		$result = $this->_ci->AnwesenheitModel->getLETermine($le_id);
		if(!isSuccess($result)) $this->terminateWithError($result);
		$this->terminateWithSuccess($result);
	}

	private function _setAuthUID()
	{
		$this->_uid = getAuthUID();

		if (!$this->_uid)
			show_error('User authentification failed');
	}

	public function populateDBWithAnwEntriesFromExistingKontrollen() {
		$lehreinheiten = [];



//		$leBatch = ["150399","142282","142614","144655","150177","144102","143616","143803","143473","142568","141609","150397","141872","141047","144273","141968","150441","143452","145389","142919","143885","144299","143928","143522","143165","142696","142618","143594","154996","143343","143796","142086","144358","149874","141078","142660","144461","141224","144022","144198","141666","142284","143143","144296","144310","145080","143655","140823","141661","142643","154817","140806","140822","150240","151141","142169","143224","141204","141671","142986","142111","141212","141712","142593","141660","143351","143850","141649","141145","143900","143336","142608","150066","142569","144454","142085","142303","144277","150272","140891","142613","144290","150569","144193","142987","151377","144303","143657","143338","141726","141662","149943","141864","141157","143917","142625","142416","141959","144388","141889","141507","144168","141904","141884","141081","143299","141172","144211","142316","144276","150095","149970","143342","142300","142176","142698","151439","149940"];
//		$leBatch = ["143538","140828","143884","145385","144072","151274","141790","143886","140792","145090","142488","141740","143235","141091","144692","149973","144247","149978","142963","142479","142128","140989","143340","150338","142970","151178","142966","143263","141762","142182","143971","142678","143232","140665","144208","142041","143795","154611","142575","143334","141218","143823","143861","150231","142106","142622","151510","140991","143904","143883","142686","145030","150083","143707","141046","141220","141070","144014","143175","144694","143314","142493","143909","144658","142445","142304","141795","142601","149974","142558","151239","142127","143288","143895","141659","143459","144270","142668","143551","150350","143275","142216","141206","141722","142359","143966","144257","142473","145044","144161"];
//		$leBatch = ["142991","141857","144172","141842","145317","141980","144165","143887","142470","144252","141752","150079","143825","141859","143878","151290","142199","141237","143360","143557","144003","141176","144034","150342","142703","154536","143722","141201","143941","143357","141637","141084","142113","143755","142967","140903","144026","143496","149944","141180","142153","142422","143420","142213","150319","141215","142278","142695","142087","142409","142611","143879","141005","143918","143728","145047","141249","154618","150289","143849","142602","142076","143913","140855","140972","142677","144212","142141","142209","150155","143617","143719","151166","143632","143025","150427","143645","140827","144150","142751","143826","142293","141716","142586","140851","144028","149987","143848","142673","141684","143169","143910","141052","144673","143464","141251","144697","140790","143745","140886","142420","150412","143999","143510","142353","140870","145058","143144","143809","143892","141496","143155","141891","143492","143139","150797","142135","140970"];
		$leBatch = ["141596","144359","150334","143799","142399","150437","143394","143871","143535","150411","144268","150279","143631","140873","144679","141639","141502","142425","150446","143725","143939","141076","142565","142803","150398","142985","144066","141928","144651","142212","140810","151237","144044","142657","141054","142639","141020","141956","142177","145033","151031","144677","151199","141962","149983","143593","142629","143002","143742","143860","142923","145687","150291","155385","142217","141089","144018","150714","142580","142616","142969","143690","145318","143605","140819","143256","143240","142476","144125","145768","143264","150349","141101","141035","140999","150266","150013","140869","144200","141060","142918","143480","141607","142089","143674","143003","143944","140994","150088","144073","143889","151235","154446","144660","141029","149876","141624","143817","142560","141202","141894","144167","144199","141028","142297","143824","149872","144115","142584","151366","141038","143448","143248","150333","143194","142557","142632","143426"];
//		$leBatch = ["141691","143844","141839","142665","150093","144162","144274","151264","143333","142080","142430","143875","143294","142699","149945","143842","150188","144051","143379","142163","143163","144478","141163","143706","151270","142160","143930","143008","142310","144265","143297","141969","145320","141509","144136","143508","143132","144223","151275","141501","143531","144011"];
//		$leBatch = ["154606","143153","142559","143831","141103","143624","141788","143604","140904","141934","150267","140899","143881","143704","142693","142444","143381","143733","144258","143810","141080","142345","143384","141241","140974","143729","143870","142506","143763","154577","142170","143976","142688","142510","143973","143177","143278","141807","143857","150831","140640","140779","140892","143833","142697","142600","142302","143255","150191","142684","143975","150901","144291","150439","150390","143783","143134","141890","151261","141735","144696","141715","150081","143665","143335","144187","143539","143901","143591","154426","141755","142490","151348","150516","154423","143822","142594","144628","143261","144323","149873","154612","143705","141648","142203","141207","144644","144144","142572","150253","141655","145089","141608","143312","140841","143958","143518","142496","155186","143854","143662","142685","142591","142319","143814","142975","151432","143811","149979","150113","143715","140752","151090","151457","150271","142187","142548","151051"];
//		$leBatch = ["141868","142133","143362","142617","141669","155386","143226","143486","141728","144254","150870","144082","143196","144286","142428","144079","144304","143484","144630","143926","142174","142173","150045","141939","154431","150690","142592","143830","142659","142039","149934","142198","141699","150373","142139","142138","151221","150239","141719","141656","143167","143562","144963","140831","142168","141161","141106","143702","144126","143779","141758","142750","141096","143932","143273","143995","143501","141638","141597","155375","143916","145380","141027","141652","144038","143244","141760","141693","143898","142358","141888","141185","143236","142417","143753","144025","143284","154605","143748","154616","141810","143285","151463","143237","140777","142411","142162","140832","151069","142653"];
//		$leBatch = ["151183","140805","141217","140867","142201","150276","143880","150568","150122","144331","143818","141696","144086","143621","141625","141736","142334","142621","141246","141687","150430","143033","145077","143846","143772","151359","150287","143188","140983","142178","145382","143687","143732","142603","143730","142640","150259","143488","143653","143218","140644","141617","142074","143607","141975","143609","151091","140836","143497","143923","143741","143750","150450","143841","142336","141498","142414","144245","142772","143456","141714","142214","142125","142329","145686","141853","143618","143193","144081","140975","144233","141072","143947","143519","140997","143532","150451","140906","142747","142443","143960","142533","144687","144204","142332","140947","145403","142208","143313","143282","143164","145048","150283","150394","143258","141014","143610","142301","141801","142289","142989","141862","144682","141021","143048","143859","150124","151079","150440","142486","141108","141861","142326","141231","144327","145771","151422","140821"];
//		$leBatch = ["142749","142295","143011","142930","142515","143843","141900","143298","151246","140973","145031","142972","141866","150389","142280","143914","143581","150062","141718","144309","142994","142689","143847","144032","143656","144314","141240","142590","154422","144149","140992","143821","144479","143430","143001","143433","142136","141958","141733","141723","140798","142604","142612","149903","142205","144226","144190","143470","142521","141097","144289","142291","149986","143453","142464","142571","144050","144192","144232","143424","143921","141737","140791","142676","143902","151142","141724","143197","155499","141803","142674","141833","144205","150252","144322","143762","141146","143230","141802","144097","141621","143980","143040","142197","141882","151289","141701","144293","144068","144213","144481","151360","141260","155417","141495","145386","143516","142116","144021","142407","143198","142105","149982","144215","141016","151054","143017","143515","144250","150436","144475","143820","142142","141695","142181","141821","151224","150435"];
//		$leBatch = ["143348","143361","144470","143254","140857","142118","143172","142194","141933","150434","141824","143907","144656","151245","143140","143493","149975","142186","154576","141167","140995","142129","141903","143800","143858","141233","151107","144634","143920","141747","142412","142285","142567","143864","142931","141619","143940","143386","142597","150405","144137","141960"];
//		$leBatch = ["154944","141598","143754","143021","151234","144480","141748","142658","142981","142619","144288","149969","145770","142318","144219","151078","143756","141082","141809","151316","142150","142499","142433","154424","141946","142566","142968","141503"];
//		$leBatch = ["143990","141164","143681","150340","144664","142146","141247","140866","143757","143874","142553","141615","142083","143934","142555","143009","143269","141806","145379","150049","142408","143524","142268","140896","140990","150112","141685","143791","144207","143979","143936","143773","142552","151177","142415","141697","143806","150262","143478","142681","145076","141883","141761","143013","144306","143303","141698","150063","143852","143141","141869","142149","141838","140782","142599","145381","144275","141717","141049","150391","141731","144324","142218","150098","143393","141711","144098","142418","144206","154805","143458","143646","144464","150086","144654","141100","142554","143819","143868","142564","142485","143781","142581","144456","143935","143590","142519","154615","142501","142793","145046","143641","142311","144632","143332","141635","150269","142924","154421","141754","141845","141944","143268","142421","143280","142509","143352","142269","144188","145405","150384","144033","143390","150274","144096","142274","142195","142691"];
//		$leBatch = ["142171","141059","143435","144669","143187","142145","141730","144269","143024","143483","141205","143797","142477","142335","143389","144434","143004","143152","143397","144436","141177","142122","143455","142492","143759","143529","143777","141981","143349","144626","141700","142410","150438","144103","141636","149954","144330","142589","141664","143031","140949","150409","143836","143148","150186","145032","143231","143234","140830","144240","141030","144294","150816","143689","141210","142448","142570","143302","144013","141734","141704","142650","142342","142489","150114","141665","141229","142320","143476","141187","150077","142395","140905","142511","144627","150180","144049","141094","141015","151143","143229","143808","143775","141160","143931","142999","145035","151269","143636","141885"];
//		$leBatch = ["141065","150567","143640","143475","142158","151265","144178","143924","143325","142277","140996","141943","144305","151341","143839","141074","143563","140839","141750","140840","140787","140944","151238","151294","144670","143708","143382","141102","142588","142532","144228","144676","151363","143396","144307","143853","142561","143658","144657","142962","150830","143882","143305","143697","143942","143993","141764","141079","144041","150225","142331","141248","142505","142801","142110","144623","141976","154739","143782","140854","142185","151271","151222","144647","143145","150295","140943","143429","142666","143696","154740","144629","141860","144029","144191","154582","143611","150179","143845","150125","144203","151223","144078","150015","141004","144361","143316","151236","142670","142683","142273","144099","143648","142990","144329","141705","141931","143919","143760","143929","151056","144156","142797","142340","154635","143267","143514","143378","143505","144400","142271","143805","144020","141856","144222","143945","143027","141061"];
//		$leBatch = ["141623","140833","143377","150393","142346","140901","143903","142503","150101","151512","154623","141814","142463","141954","142100","151232","150509","150406","142327","145081","142265","142424","144667","143388","142207","142337","150326","144964","142432","141150","142154","141600","142079","141668","141186","141826","141010","141196","142166","143466","141961","151362","154641","142323","141141","142077","143721","142462","141634","142504","142500","140856","143638","151364","145059","143171","155041","151291","142155","141629","150226","142108","142419","154613","143642","141258","144281","144153","142215","141982","150152","143851","141751","151272","141083","142514","142467","143943","149957","150070","144463","142325","143402","144128","141008","144455","143018","140778","142808","143558","142701","142631","149972","142248","150154","143020","144106","150273","144027","143778","154429","143894","142159","143380","143893","144302","151219","155522","144127","143245","141222","144431","142309","143499","141504","143534","143649","143401"];
//		$leBatch = ["141952","142642","141706","144004","142609","142620","144249","142652","142123","144466","143949","142112","143599","142120","140637","144169","141011","144279","150075","144131","142475","141709","142312","143988","144104","143765","143890","142447","150069","143827","140951","141929","141257","141757","143533","143678","141628","142356","142587","140920","143137","141066"];
//		$leBatch = ["144209","141880","142355","154425","151179","142413","143179","142338","150374","143813","143247","143030","141966","151225","144171","144220","142099","143525","142281","143578","141019","144292","149942","143933","143964","143045","143751","145384","143182"];
//		$leBatch = ["143667","144313","145045","141813","143249","143331","151021","144443","144201","141611","140968","140783","142341","141876","144019","144328","143786","142143","149877","143962","145079","143353","143015","151050","143927","141149","141653","141974","141851","150264","141650","141034","142976","144181","142502","143951","150123","143451","151379","144462","143272","143744","151266","141692","141686","143176","145388","150242","142520","143151","142042","141616","143840","142294","141073","143598","151144","154785","141672","141071","143752","155049","151267","141647","151455","141940","143046","142704","150078","141805","143743","140976","150097","143491","140969","143180","143595","143994","144180","141899","142288","143358","150871","143250","144285","144065","142459","141044","142196","144652","142748","141221","142669","142995","142624","144684","143946","143872","143233","142928","141963","144218","143449","142690","144312","145034","151342","151511","150442","142040","141702","141955","142258","150286","155457","144071","142206","142971"];
//		$leBatch = ["150126","143485","142151","143434","142996","142292","143511","154614","144653","145057","144472","141721","141951","143679","142183","141211","145055","144284","143620","142090","150280","142427","143460","140746","144148","140824","144287","142045","142296","144248","142134","144325","144675","143527","142702","141181","149955","142275","149968","142607","140900","144217","143622","141162","144142","149950","142354","142700","143526","141957","144231","142649","141837","140834","145383","150238","142109","151077","143408","142102","143274","143528","142671","142299","141013","143281","143866","140998","143422","143283","141689","142471","151268","144010","141743","142188","150121","142446","143219","144210","149956","143727","141075","143981","145082","141620","142179","151300","141763","143897"];
//		$leBatch = ["144214","143628","142623","142615","142126","144624","144194","144688","140630","141618","145088","154787","143161","141622","141033","141855","143184","142964","143138","145078","140829","142103","143295","142663","141759","142283","142667","141720","141694","142656","142107","142144","143911","144460","141003","140929","142466","144143","144251","143675","140784","143199","141871","150261","142121","141732","151273","143950","141085","142578","141632","143457","142481","140747","144017","143185","143577","144140","144438","141183","143359","141009","142190","150100","143915","142610","144356","142508","143471","143490","143614","144185","151262","141178","150712","142073","144297","143807","142290","143586","150396","143888","151350","142651","142694","143579","144164","154420","142483","150407","144058","143494","141036","144186","142321","141690","141739","143701","141657","141654","141658","151349","143996","150044","141107","142117","143876","142204","142692","142324","144183","140898","145086","143174","151145","143863","143307","143293"];
//		$leBatch = ["141822","143418","141169","141630","142998","143938","140948","142582","154806","144236","144083","143731","144080","142633","143023","150344","142997","143403","141745","141670","141184","140847","140982","144659","150318","140887","143801","144650","143146","144056","149971","142648","142921","142468","144195","141741","142654","155500","143454","140889","150243","142974","142498","142563","141158","140895","142810","140868","143467","141895","151087","143131","143427","144005","144633","141970","151380","149916","144308","142513","143341","143816","142562","141785","141105","143747","143513","141906","143634","151465","143472","142573","143181","141051","142980","143354","141708","150392","141214","142266","142132","141742","143832","140641","145056","142317","144179","141746","142965","141703"];
//		$leBatch = ["143758","141259","150108","143026","141830","143423","143908","141973","150012","142800","143260","143520","141092","143154","150241","143937","143392","143812","143502","143029","154617","140993","144074","144255","143339","151263","150110","150014","144625","143784","143991","142400","144234","142270","141847","150198","143922","141058","142260","141633","151198","144690","140977","144235","143855","141713","143835","144094","144147","141798","141017","143677","150902","145087","140645","143654","142598","151052","144122","142672","143479","141506","143318","143034","142556","143564","143503","142339","141683","141835","144301","150387","150285","144024","144661","143867","151419","143686","142630","150339","143709","141710","143953","141171","145029","154430","150260","144182","144311","143238","142231","150102","149875","151095","141707","141829","142140","150067","143802","144060","141784","144160","141744","141012","143589","143968","143838","140848","141651","143700","141964","141088","143507","144260","142202","142261","151293","142286"];
//		$leBatch = ["142773","150149","143317","143509","143625","143789","141244","143829","142130","142200","149902","140931","143977","143047","144196","142465","149941","142152","144095","143495","143672","143409","141156","142322","150090","140952","143780","143243","141627","142753","143012","143541","150089","143259","141738","143149","143669","143537","144184","144141","143465","142210","144678","143315","143469","150447","150402","140636","143596","143787","150268","141792","143746","150257","143740","142191","143761","143474","143637","141499","154781","143685","144189","143891","142423","143044","144130","150151","142276","151190","151514","143498","140853","142461","143788","143998","144447","143447","142480","150448","144129","143239","142992","144282","143794","142585","141209","150091","140682","143955","143308","143774","144139","142343","140634","142920","142189","150281","145688","143828","143147","144177","150277","143540","143644","142675","142491","142754","141965","144663","143615","141932","142645","143612","142596","143133","150358","141808"];
//		$leBatch = ["142262","144030","143337","143804","140835","142478","142627","150401","143815","141234","141191","144135","140917","142088","144435","141850","143517","141230","150016","151458","143462","150343","141626","143899","142075","143862","140845","150275","141725","141727","143387","142804","144008","141663","141797","143749","141941","150197","150196","141949","144246","143925"];
//		$leBatch = ["141905","141852","141198","143225","143726","140950","140807","144012","143191","144631","143039","143663","145060","149951","142682","144202","143896","141729","141002","140635","150076","142646","143000","143978","150828","143952","144031","144437","141077","143785","143710","143170","142330","142579","140918","143969","150288","143432","141846","141756","142114","150444","143246","150064","143428","143521","142487","142595","154843","143856","143304","145075","143837","142583","142737","143463","143477","150084","141039","144146","142606","142426","140902","151057","142344","143136","142574","143613","144015","141182","141098","144458","144216","155636","141935","145315","144100","142279","143504","143619","141610","141045","141843","143668","143906","155521","150178","143319","143201","150410","143410","143592","151233","143398","150194","143666","154596","143425","143734","143912","145689","150320","143723","145085","142460","141749","141950","143997","143461","142993","143905","142287","140844","144059","143399","143135","144067","142165"];

		foreach($leBatch as $le_id) {
//			$res = $this->AnwesenheitModel->loadWhere(array('lehreinheit_id' => $le_id));
			$res = $this->AnwesenheitModel->loadEmptyAnwesenheitenForLE($le_id);
			$data = getData($res);

			foreach($data as $anw) {
				$this->_ci->AnwesenheitUserModel->createNewUserAnwesenheitenEntries(
					$le_id,
					$anw->anwesenheit_id,
					$anw->von,
					$anw->bis,
					'abwesend',
					'entschuldigt');
			}
		}

	}

	public function populateDBWithAnwEntries() {
		// insert tbl.extension_anwesenheit_user entries for every LE of every LVA of every Studiengang to test limits

		// tbl.studiengang WHERE aktiv = true AND studienplaetze > 0 AND typ = 'b' OR typ = 'm'
		$studiengaenge = [227, 254, 779, 257, 330, 327, 256, 476, 333, 255, 335, 258, 301, 228, 934, 302, 578, 329, 915, 336, 303, 854, 334, 331, 300, 332, 328, 692, 804, 585, 297, 298, 299];

//		$studiengaenge = [227, 254];//, 779, 257, 330, 327, 256, 476, 333, 255, 335, 258, 301, 228, 934, 302, 578, 329, 915, 336, 303, 854, 334, 331, 300, 332, 328, 692, 804, 585, 297, 298, 299];
//		$studiengaenge = [257];
		$response = [];
		$sgIndex = 0;
		foreach($studiengaenge as $sg) {

			// load all lva
			$resLVA = $this->_ci->LehrveranstaltungModel->loadWhere(array('studiengang_kz' => $sg));
			$this->_ci->LehrveranstaltungModel->resetQuery();
			$data = $resLVA->retval;

			$response[$sgIndex] = array(
				'sg' => $sg,
				'lva' => array());

			$lvaIndex = 0;
			foreach($data as $lvaRow) {
				// load all le
				$resLE = $this->_ci->AnwesenheitModel->getAllLehreinheitenForLva($lvaRow->lehrveranstaltung_id, 'SS2024');
				$this->_ci->AnwesenheitModel->resetQuery();
				$dataLE = $resLE->retval;

				if(!empty($dataLE)) {
					$response[$sgIndex]['lva'][$lvaRow->lehrveranstaltung_id] = [];
				}

				$leIndex = 0;
				foreach($dataLE as $leRow) {

					$response[$sgIndex]['lva'][$lvaRow->lehrveranstaltung_id][$leRow->lehreinheit_id] = [];
					// find termine for LE
					$resTermine = $this->_ci->AnwesenheitModel->getLETermine($leRow->lehreinheit_id);
					$this->_ci->AnwesenheitModel->resetQuery();
					$dataTermine = $resTermine->retval;

					// kontrolle and anwesenheiten on each termin
					$terminIndex = 0;
					foreach($dataTermine as $terminRow) {

						$response[$sgIndex]['lva'][$lvaRow->lehrveranstaltung_id][$leRow->lehreinheit_id][$terminIndex] = $terminRow;

						$vonString = $terminRow->datum.' '.$terminRow->beginn;
						$endeString = $terminRow->datum.' '.$terminRow->ende;

						$insert = $this->_ci->AnwesenheitModel->insert(array(
							'lehreinheit_id' => $leRow->lehreinheit_id,
							'insertamum' => date('Y-m-d H:i:s'),
							'von' => $vonString,
							'bis' => $endeString
						));

						$anwesenheit_id = $insert->retval;
						$this->_ci->AnwesenheitUserModel->createNewUserAnwesenheitenEntries(
							$leRow->lehreinheit_id,
							$anwesenheit_id,
							$vonString,
							$endeString,
							'abwesend',
							'entschuldigt');

						$terminIndex++;
					}

					$leIndex++;
				}

				$lvaIndex++;
			}

			$sgIndex++;
		}

		$this->terminateWithSuccess($response);
	}

}